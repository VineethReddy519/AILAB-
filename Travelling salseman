def travellingSalesmanProblem(graph, start_city):
    def backtrack(path, visited, current_cost):
        nonlocal min_cost, minimal_paths
        if len(path) == len(graph):
            if current_cost < min_cost:
                min_cost = current_cost
                minimal_paths = [path[:] + [path[0]]]
            elif current_cost == min_cost:
                minimal_paths.append(path[:] + [path[0]])
            all_paths.append(path[:] + [path[0]])
            return

        for city in range(len(graph)):
            if not visited[city] and graph[path[-1]][city] != float('inf'):
                path.append(city)
                visited[city] = True
                new_cost = current_cost + graph[path[-2]][city] if len(path) > 1 else current_cost
                backtrack(path, visited, new_cost)
                visited[city] = False
                path.pop()

    V = len(graph)
    all_paths = []
    min_cost = float('inf')
    minimal_paths = []

    visited = [False] * V
    path = [start_city]
    visited[start_city] = True

    backtrack(path, visited, 0)

    return all_paths, minimal_paths

def read_distance_matrix():
    num_cities = int(input("Enter the number of cities: "))
    distance_matrix = []

    print("Enter the distance between cities. Use 'N' for cities without connections:")
    cities = [f'c{i+1}' for i in range(num_cities)]
    for i in range(num_cities):
        row = []
        for j in range(num_cities):
            distance = input(f"Distance from {cities[i]} to {cities[j]}: ")
            if distance == 'N':
                row.append(float('inf'))
            else:
                row.append(float(distance))
        distance_matrix.append(row)

    return distance_matrix

if __name__ == "__main__":
    distance_matrix = read_distance_matrix()
    start_city = input("Enter the starting city (e.g., 1, c2, c3): ")
    cities = [f'c{i+1}' for i in range(len(distance_matrix))]
    start_index = cities.index(start_city) if start_city in cities else 0
    all_paths, minimal_paths = travellingSalesmanProblem(distance_matrix, start_index)
    p = []
    print("All Paths:")
    for index, path in enumerate(all_paths):
        weight = sum(distance_matrix[path[i]][path[i + 1]] for i in range(len(path) - 1))
        weight += distance_matrix[path[-1]][path[0]]
        path_with_names = [cities[i] for i in path]
        if weight != 0:
            print(f"Path {index + 1}: {path_with_names}, Weight: {weight}")
            p.append(weight)

    if not p:  
        print("No valid paths found.")
    else:
        min_weight = min(p)
        print("Paths with minimum weight:")
        k = 1
        for index, path in enumerate(all_paths):
            weight = sum(distance_matrix[path[i]][path[i + 1]] for i in range(len(path) - 1))
            weight += distance_matrix[path[-1]][path[0]]
            if weight == min_weight:
                path_with_names = [cities[i] for i in path]
                print(f"Path {k}: {path_with_names}, Weight: {weight}")
                k += 1
